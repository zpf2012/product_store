/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.product.store.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.product.store.model.Apply;
import com.liferay.product.store.model.ApplyModel;
import com.liferay.product.store.model.ApplySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Apply service. Represents a row in the &quot;CUX_Apply&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.product.store.model.ApplyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplyImpl}.
 * </p>
 *
 * @author zhangpengfei
 * @see ApplyImpl
 * @see com.liferay.product.store.model.Apply
 * @see com.liferay.product.store.model.ApplyModel
 * @generated
 */
@JSON(strict = true)
public class ApplyModelImpl extends BaseModelImpl<Apply> implements ApplyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a apply model instance should use the {@link com.liferay.product.store.model.Apply} interface instead.
	 */
	public static final String TABLE_NAME = "CUX_Apply";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "applyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "projectName", Types.VARCHAR },
			{ "integrationObject", Types.VARCHAR },
			{ "useType", Types.VARCHAR },
			{ "approveFlag", Types.VARCHAR },
			{ "approveDate", Types.TIMESTAMP },
			{ "creationDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "updateDate", Types.TIMESTAMP },
			{ "updatedBy", Types.BIGINT },
			{ "productId", Types.BIGINT },
			{ "useDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CUX_Apply (uuid_ VARCHAR(75) null,applyId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,projectName VARCHAR(75) null,integrationObject VARCHAR(75) null,useType VARCHAR(75) null,approveFlag VARCHAR(75) null,approveDate DATE null,creationDate DATE null,createdBy LONG,updateDate DATE null,updatedBy LONG,productId LONG,useDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CUX_Apply";
	public static final String ORDER_BY_JPQL = " ORDER BY apply.applyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CUX_Apply.applyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.product.store.model.Apply"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.product.store.model.Apply"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.product.store.model.Apply"),
			true);
	public static long APPLYID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Apply toModel(ApplySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Apply model = new ApplyImpl();

		model.setUuid(soapModel.getUuid());
		model.setApplyId(soapModel.getApplyId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setProjectName(soapModel.getProjectName());
		model.setIntegrationObject(soapModel.getIntegrationObject());
		model.setUseType(soapModel.getUseType());
		model.setApproveFlag(soapModel.getApproveFlag());
		model.setApproveDate(soapModel.getApproveDate());
		model.setCreationDate(soapModel.getCreationDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setUpdateDate(soapModel.getUpdateDate());
		model.setUpdatedBy(soapModel.getUpdatedBy());
		model.setProductId(soapModel.getProductId());
		model.setUseDate(soapModel.getUseDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Apply> toModels(ApplySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Apply> models = new ArrayList<Apply>(soapModels.length);

		for (ApplySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.product.store.model.Apply"));

	public ApplyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Apply.class;
	}

	@Override
	public String getModelClassName() {
		return Apply.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("applyId", getApplyId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("projectName", getProjectName());
		attributes.put("integrationObject", getIntegrationObject());
		attributes.put("useType", getUseType());
		attributes.put("approveFlag", getApproveFlag());
		attributes.put("approveDate", getApproveDate());
		attributes.put("creationDate", getCreationDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("productId", getProductId());
		attributes.put("useDate", getUseDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long applyId = (Long)attributes.get("applyId");

		if (applyId != null) {
			setApplyId(applyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String projectName = (String)attributes.get("projectName");

		if (projectName != null) {
			setProjectName(projectName);
		}

		String integrationObject = (String)attributes.get("integrationObject");

		if (integrationObject != null) {
			setIntegrationObject(integrationObject);
		}

		String useType = (String)attributes.get("useType");

		if (useType != null) {
			setUseType(useType);
		}

		String approveFlag = (String)attributes.get("approveFlag");

		if (approveFlag != null) {
			setApproveFlag(approveFlag);
		}

		Date approveDate = (Date)attributes.get("approveDate");

		if (approveDate != null) {
			setApproveDate(approveDate);
		}

		Date creationDate = (Date)attributes.get("creationDate");

		if (creationDate != null) {
			setCreationDate(creationDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		Long updatedBy = (Long)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		Date useDate = (Date)attributes.get("useDate");

		if (useDate != null) {
			setUseDate(useDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getApplyId() {
		return _applyId;
	}

	@Override
	public void setApplyId(long applyId) {
		_columnBitmask |= APPLYID_COLUMN_BITMASK;

		if (!_setOriginalApplyId) {
			_setOriginalApplyId = true;

			_originalApplyId = _applyId;
		}

		_applyId = applyId;
	}

	public long getOriginalApplyId() {
		return _originalApplyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public String getProjectName() {
		if (_projectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectName;
		}
	}

	@Override
	public void setProjectName(String projectName) {
		_projectName = projectName;
	}

	@JSON
	@Override
	public String getIntegrationObject() {
		if (_integrationObject == null) {
			return StringPool.BLANK;
		}
		else {
			return _integrationObject;
		}
	}

	@Override
	public void setIntegrationObject(String integrationObject) {
		_integrationObject = integrationObject;
	}

	@JSON
	@Override
	public String getUseType() {
		if (_useType == null) {
			return StringPool.BLANK;
		}
		else {
			return _useType;
		}
	}

	@Override
	public void setUseType(String useType) {
		_useType = useType;
	}

	@JSON
	@Override
	public String getApproveFlag() {
		if (_approveFlag == null) {
			return StringPool.BLANK;
		}
		else {
			return _approveFlag;
		}
	}

	@Override
	public void setApproveFlag(String approveFlag) {
		_approveFlag = approveFlag;
	}

	@JSON
	@Override
	public Date getApproveDate() {
		return _approveDate;
	}

	@Override
	public void setApproveDate(Date approveDate) {
		_approveDate = approveDate;
	}

	@JSON
	@Override
	public Date getCreationDate() {
		return _creationDate;
	}

	@Override
	public void setCreationDate(Date creationDate) {
		_creationDate = creationDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@JSON
	@Override
	public long getUpdatedBy() {
		return _updatedBy;
	}

	@Override
	public void setUpdatedBy(long updatedBy) {
		_updatedBy = updatedBy;
	}

	@JSON
	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		_productId = productId;
	}

	@JSON
	@Override
	public Date getUseDate() {
		return _useDate;
	}

	@Override
	public void setUseDate(Date useDate) {
		_useDate = useDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Apply.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Apply toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Apply)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplyImpl applyImpl = new ApplyImpl();

		applyImpl.setUuid(getUuid());
		applyImpl.setApplyId(getApplyId());
		applyImpl.setGroupId(getGroupId());
		applyImpl.setCompanyId(getCompanyId());
		applyImpl.setUserId(getUserId());
		applyImpl.setUserName(getUserName());
		applyImpl.setProjectName(getProjectName());
		applyImpl.setIntegrationObject(getIntegrationObject());
		applyImpl.setUseType(getUseType());
		applyImpl.setApproveFlag(getApproveFlag());
		applyImpl.setApproveDate(getApproveDate());
		applyImpl.setCreationDate(getCreationDate());
		applyImpl.setCreatedBy(getCreatedBy());
		applyImpl.setUpdateDate(getUpdateDate());
		applyImpl.setUpdatedBy(getUpdatedBy());
		applyImpl.setProductId(getProductId());
		applyImpl.setUseDate(getUseDate());

		applyImpl.resetOriginalValues();

		return applyImpl;
	}

	@Override
	public int compareTo(Apply apply) {
		long primaryKey = apply.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Apply)) {
			return false;
		}

		Apply apply = (Apply)obj;

		long primaryKey = apply.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ApplyModelImpl applyModelImpl = this;

		applyModelImpl._originalUuid = applyModelImpl._uuid;

		applyModelImpl._originalApplyId = applyModelImpl._applyId;

		applyModelImpl._setOriginalApplyId = false;

		applyModelImpl._originalGroupId = applyModelImpl._groupId;

		applyModelImpl._setOriginalGroupId = false;

		applyModelImpl._originalCompanyId = applyModelImpl._companyId;

		applyModelImpl._setOriginalCompanyId = false;

		applyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Apply> toCacheModel() {
		ApplyCacheModel applyCacheModel = new ApplyCacheModel();

		applyCacheModel.uuid = getUuid();

		String uuid = applyCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			applyCacheModel.uuid = null;
		}

		applyCacheModel.applyId = getApplyId();

		applyCacheModel.groupId = getGroupId();

		applyCacheModel.companyId = getCompanyId();

		applyCacheModel.userId = getUserId();

		applyCacheModel.userName = getUserName();

		String userName = applyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applyCacheModel.userName = null;
		}

		applyCacheModel.projectName = getProjectName();

		String projectName = applyCacheModel.projectName;

		if ((projectName != null) && (projectName.length() == 0)) {
			applyCacheModel.projectName = null;
		}

		applyCacheModel.integrationObject = getIntegrationObject();

		String integrationObject = applyCacheModel.integrationObject;

		if ((integrationObject != null) && (integrationObject.length() == 0)) {
			applyCacheModel.integrationObject = null;
		}

		applyCacheModel.useType = getUseType();

		String useType = applyCacheModel.useType;

		if ((useType != null) && (useType.length() == 0)) {
			applyCacheModel.useType = null;
		}

		applyCacheModel.approveFlag = getApproveFlag();

		String approveFlag = applyCacheModel.approveFlag;

		if ((approveFlag != null) && (approveFlag.length() == 0)) {
			applyCacheModel.approveFlag = null;
		}

		Date approveDate = getApproveDate();

		if (approveDate != null) {
			applyCacheModel.approveDate = approveDate.getTime();
		}
		else {
			applyCacheModel.approveDate = Long.MIN_VALUE;
		}

		Date creationDate = getCreationDate();

		if (creationDate != null) {
			applyCacheModel.creationDate = creationDate.getTime();
		}
		else {
			applyCacheModel.creationDate = Long.MIN_VALUE;
		}

		applyCacheModel.createdBy = getCreatedBy();

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			applyCacheModel.updateDate = updateDate.getTime();
		}
		else {
			applyCacheModel.updateDate = Long.MIN_VALUE;
		}

		applyCacheModel.updatedBy = getUpdatedBy();

		applyCacheModel.productId = getProductId();

		Date useDate = getUseDate();

		if (useDate != null) {
			applyCacheModel.useDate = useDate.getTime();
		}
		else {
			applyCacheModel.useDate = Long.MIN_VALUE;
		}

		return applyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", applyId=");
		sb.append(getApplyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", projectName=");
		sb.append(getProjectName());
		sb.append(", integrationObject=");
		sb.append(getIntegrationObject());
		sb.append(", useType=");
		sb.append(getUseType());
		sb.append(", approveFlag=");
		sb.append(getApproveFlag());
		sb.append(", approveDate=");
		sb.append(getApproveDate());
		sb.append(", creationDate=");
		sb.append(getCreationDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", productId=");
		sb.append(getProductId());
		sb.append(", useDate=");
		sb.append(getUseDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.liferay.product.store.model.Apply");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyId</column-name><column-value><![CDATA[");
		sb.append(getApplyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectName</column-name><column-value><![CDATA[");
		sb.append(getProjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>integrationObject</column-name><column-value><![CDATA[");
		sb.append(getIntegrationObject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useType</column-name><column-value><![CDATA[");
		sb.append(getUseType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approveFlag</column-name><column-value><![CDATA[");
		sb.append(getApproveFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approveDate</column-name><column-value><![CDATA[");
		sb.append(getApproveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creationDate</column-name><column-value><![CDATA[");
		sb.append(getCreationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useDate</column-name><column-value><![CDATA[");
		sb.append(getUseDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Apply.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Apply.class };
	private String _uuid;
	private String _originalUuid;
	private long _applyId;
	private long _originalApplyId;
	private boolean _setOriginalApplyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private String _projectName;
	private String _integrationObject;
	private String _useType;
	private String _approveFlag;
	private Date _approveDate;
	private Date _creationDate;
	private long _createdBy;
	private Date _updateDate;
	private long _updatedBy;
	private long _productId;
	private Date _useDate;
	private long _columnBitmask;
	private Apply _escapedModel;
}